{"version":3,"sources":["../src/db/dynamodb.ts","../src/index.ts","../src/schema.js","../src/resolvers.js"],"sourcesContent":["import { DynamoDBClient } from '@aws-sdk/client-dynamodb';\r\nimport { DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb';\r\n\r\nconst isLocal = process.env.NODE_ENV === 'development';\r\n\r\nconst client = new DynamoDBClient({\r\n  region: 'local',\r\n  endpoint: isLocal ? 'http://localhost:8000' : undefined,\r\n  credentials: {\r\n    accessKeyId: 'dummy',\r\n    secretAccessKey: 'dummy',\r\n  },\r\n});\r\n\r\nexport const docClient = DynamoDBDocumentClient.from(client);\r\n\r\n// Table names\r\nexport const TABLES = {\r\n  TASKS: 'Tasks',\r\n  USERS: 'Users',\r\n} as const; ","import express from 'express';\r\nimport { ApolloServer } from '@apollo/server';\r\nimport { expressMiddleware } from '@apollo/server/express4';\r\nimport { typeDefs } from './schema.js';\r\nimport { resolvers } from './resolvers.js';\r\nimport cors from 'cors';\r\nimport { BaseContext } from '@apollo/server';\r\n\r\nasync function startServer() {\r\n  console.log('Starting server initialization...');\r\n  console.log('TypeDefs:', typeDefs);\r\n  console.log('Resolvers:', JSON.stringify(resolvers, null, 2));\r\n\r\n  const app = express();\r\n  console.log('Express app created');\r\n\r\n  // Enable CORS for all routes\r\n  app.use(cors());\r\n  app.use(express.json());\r\n\r\n  const server = new ApolloServer<BaseContext>({\r\n    typeDefs,\r\n    resolvers,\r\n    introspection: true,\r\n    csrfPrevention: false,\r\n    cache: 'bounded'\r\n  });\r\n  console.log('Apollo Server instance created');\r\n\r\n  try {\r\n    await server.start();\r\n    console.log('Apollo Server started successfully');\r\n\r\n    // Mount the GraphQL middleware\r\n    app.use('/graphql', expressMiddleware(server, {\r\n      context: async () => {\r\n        console.log('Creating context...');\r\n        return {};\r\n      }\r\n    }));\r\n    console.log('GraphQL middleware configured');\r\n\r\n    const PORT = process.env.PORT || 4001;\r\n    app.listen(PORT, () => {\r\n      console.log(`ðŸš€ Server ready at http://localhost:${PORT}/graphql`);\r\n      console.log('Server is listening for requests...');\r\n    });\r\n  } catch (error) {\r\n    console.error('Error starting server:', error);\r\n    if (error instanceof Error) {\r\n      console.error('Error name:', error.name);\r\n      console.error('Error message:', error.message);\r\n      console.error('Error stack:', error.stack);\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\nconsole.log('Starting server...');\r\nstartServer().catch(error => {\r\n  console.error('Failed to start server:', error);\r\n  if (error instanceof Error) {\r\n    console.error('Error name:', error.name);\r\n    console.error('Error message:', error.message);\r\n    console.error('Error stack:', error.stack);\r\n  }\r\n  process.exit(1);\r\n}); ","\"use strict\";\nvar __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n    return cooked;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.typeDefs = void 0;\nvar graphql_tag_1 = require(\"graphql-tag\");\nexports.typeDefs = (0, graphql_tag_1.gql)(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  enum TaskStatus {\\n    NOT_STARTED\\n    IN_PROGRESS\\n    COMPLETED\\n  }\\n\\n  enum UserRole {\\n    ADMIN\\n    MANAGER\\n    USER\\n  }\\n\\n  enum Priority {\\n    LOW\\n    MEDIUM\\n    HIGH\\n  }\\n\\n  type Task {\\n    id: Int!\\n    title: String!\\n    description: String\\n    status: TaskStatus!\\n    dueDate: String\\n    scheduledDate: String\\n    completionDate: String\\n    priority: Priority\\n    isRecurring: Boolean\\n    assignedTo: User\\n    createdBy: User!\\n    tenantId: String!\\n    createdAt: String!\\n    updatedAt: String!\\n  }\\n\\n  type User {\\n    id: Int!\\n    name: String!\\n    email: String!\\n    role: UserRole!\\n    tenantId: String!\\n  }\\n\\n  type Query {\\n    tasks(tenantId: String!): [Task!]!\\n    task(id: Int!): Task\\n    users(tenantId: String!): [User!]!\\n    user(id: Int!): User\\n  }\\n\\n  input CreateTaskInput {\\n    title: String!\\n    description: String\\n    status: TaskStatus!\\n    dueDate: String\\n    scheduledDate: String\\n    priority: Priority\\n    isRecurring: Boolean\\n    assignedToId: Int\\n    tenantId: String!\\n    createdById: Int!\\n  }\\n  \\n  input UpdateTaskInput {\\n    id: Int!\\n    title: String\\n    description: String\\n    status: TaskStatus\\n    dueDate: String\\n    scheduledDate: String\\n    completionDate: String\\n    priority: Priority\\n    isRecurring: Boolean\\n    assignedToId: Int\\n  }\\n  \\n  type Mutation {\\n    createTask(input: CreateTaskInput!): Task!\\n    updateTask(input: UpdateTaskInput!): Task!\\n    deleteTask(id: Int!): Boolean!\\n  }\\n\\n  type Subscription {\\n    taskUpdated(tenantId: String!): Task!\\n    taskCreated(tenantId: String!): Task!\\n    taskDeleted(tenantId: String!): Int!\\n  }\\n\"], [\"\\n  enum TaskStatus {\\n    NOT_STARTED\\n    IN_PROGRESS\\n    COMPLETED\\n  }\\n\\n  enum UserRole {\\n    ADMIN\\n    MANAGER\\n    USER\\n  }\\n\\n  enum Priority {\\n    LOW\\n    MEDIUM\\n    HIGH\\n  }\\n\\n  type Task {\\n    id: Int!\\n    title: String!\\n    description: String\\n    status: TaskStatus!\\n    dueDate: String\\n    scheduledDate: String\\n    completionDate: String\\n    priority: Priority\\n    isRecurring: Boolean\\n    assignedTo: User\\n    createdBy: User!\\n    tenantId: String!\\n    createdAt: String!\\n    updatedAt: String!\\n  }\\n\\n  type User {\\n    id: Int!\\n    name: String!\\n    email: String!\\n    role: UserRole!\\n    tenantId: String!\\n  }\\n\\n  type Query {\\n    tasks(tenantId: String!): [Task!]!\\n    task(id: Int!): Task\\n    users(tenantId: String!): [User!]!\\n    user(id: Int!): User\\n  }\\n\\n  input CreateTaskInput {\\n    title: String!\\n    description: String\\n    status: TaskStatus!\\n    dueDate: String\\n    scheduledDate: String\\n    priority: Priority\\n    isRecurring: Boolean\\n    assignedToId: Int\\n    tenantId: String!\\n    createdById: Int!\\n  }\\n  \\n  input UpdateTaskInput {\\n    id: Int!\\n    title: String\\n    description: String\\n    status: TaskStatus\\n    dueDate: String\\n    scheduledDate: String\\n    completionDate: String\\n    priority: Priority\\n    isRecurring: Boolean\\n    assignedToId: Int\\n  }\\n  \\n  type Mutation {\\n    createTask(input: CreateTaskInput!): Task!\\n    updateTask(input: UpdateTaskInput!): Task!\\n    deleteTask(id: Int!): Boolean!\\n  }\\n\\n  type Subscription {\\n    taskUpdated(tenantId: String!): Task!\\n    taskCreated(tenantId: String!): Task!\\n    taskDeleted(tenantId: String!): Int!\\n  }\\n\"])));\nvar templateObject_1;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolvers = void 0;\nvar dynamodb_1 = require(\"./db/dynamodb\");\nvar client_dynamodb_1 = require(\"@aws-sdk/client-dynamodb\");\nvar client_dynamodb_2 = require(\"@aws-sdk/client-dynamodb\");\nvar client = new client_dynamodb_2.DynamoDBClient({\n    region: 'local',\n    endpoint: 'http://localhost:8000',\n    credentials: {\n        accessKeyId: 'dummy',\n        secretAccessKey: 'dummy',\n    },\n});\n// Helper function to convert JavaScript values to DynamoDB AttributeValue\nvar toDynamoDBValue = function (value) {\n    if (typeof value === 'number') {\n        return { N: value.toString() };\n    }\n    if (typeof value === 'string') {\n        return { S: value };\n    }\n    if (typeof value === 'boolean') {\n        return { BOOL: value };\n    }\n    if (value === null || value === undefined) {\n        return { NULL: true };\n    }\n    if (Array.isArray(value)) {\n        return { L: value.map(toDynamoDBValue) };\n    }\n    if (typeof value === 'object') {\n        return { M: Object.fromEntries(Object.entries(value).map(function (_a) {\n                var k = _a[0], v = _a[1];\n                return [k, toDynamoDBValue(v)];\n            })) };\n    }\n    throw new Error(\"Unsupported value type: \".concat(typeof value));\n};\n// Helper function to convert DynamoDB item to Task\nvar convertDynamoItemToTask = function (item) {\n    var _a, _b, _c, _d, _e, _f;\n    return {\n        id: Number(item.id.N),\n        title: item.title.S,\n        description: ((_a = item.description) === null || _a === void 0 ? void 0 : _a.S) || null,\n        status: item.status.S,\n        dueDate: ((_b = item.dueDate) === null || _b === void 0 ? void 0 : _b.S) || null,\n        scheduledDate: ((_c = item.scheduledDate) === null || _c === void 0 ? void 0 : _c.S) || null,\n        completionDate: ((_d = item.completionDate) === null || _d === void 0 ? void 0 : _d.S) || null,\n        priority: ((_e = item.priority) === null || _e === void 0 ? void 0 : _e.S) || null,\n        isRecurring: ((_f = item.isRecurring) === null || _f === void 0 ? void 0 : _f.BOOL) || false,\n        assignedToId: item.assignedToId ? Number(item.assignedToId.N) : null,\n        createdById: Number(item.createdById.N),\n        tenantId: item.tenantId.S,\n        createdAt: item.createdAt.S,\n        updatedAt: item.updatedAt.S,\n    };\n};\n// Helper function to convert DynamoDB item to User\nvar convertDynamoItemToUser = function (item) {\n    return {\n        id: Number(item.id.N),\n        name: item.name.S,\n        email: item.email.S,\n        role: item.role.S,\n        tenantId: item.tenantId.S,\n    };\n};\nexports.resolvers = {\n    Query: {\n        tasks: function (_, _a) {\n            var tenantId = _a.tenantId;\n            return __awaiter(void 0, void 0, void 0, function () {\n                var command, response, tasks, error_1;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            console.log(\"[Tasks Resolver] Starting task fetch for tenant: \".concat(tenantId));\n                            _b.label = 1;\n                        case 1:\n                            _b.trys.push([1, 4, , 5]);\n                            console.log('[Tasks Resolver] Building QueryCommand with params:', {\n                                TableName: dynamodb_1.TABLES.TASKS,\n                                IndexName: 'TenantIndex',\n                                KeyConditionExpression: '#tenantId = :tenantId',\n                                ExpressionAttributeNames: {\n                                    '#tenantId': 'tenantId',\n                                },\n                                ExpressionAttributeValues: {\n                                    ':tenantId': toDynamoDBValue(tenantId),\n                                },\n                            });\n                            command = new client_dynamodb_1.QueryCommand({\n                                TableName: dynamodb_1.TABLES.TASKS,\n                                IndexName: 'TenantIndex',\n                                KeyConditionExpression: '#tenantId = :tenantId',\n                                ExpressionAttributeNames: {\n                                    '#tenantId': 'tenantId',\n                                },\n                                ExpressionAttributeValues: {\n                                    ':tenantId': toDynamoDBValue(tenantId),\n                                },\n                            });\n                            console.log('[Tasks Resolver] Sending QueryCommand to DynamoDB...');\n                            return [4 /*yield*/, client.send(command)];\n                        case 2:\n                            response = _b.sent();\n                            console.log('[Tasks Resolver] Raw DynamoDB response:', JSON.stringify(response, null, 2));\n                            if (!response.Items || response.Items.length === 0) {\n                                console.log('[Tasks Resolver] No tasks found in DynamoDB response');\n                                return [2 /*return*/, []];\n                            }\n                            console.log(\"[Tasks Resolver] Found \".concat(response.Items.length, \" raw items in DynamoDB response\"));\n                            tasks = (response.Items || []).map(function (item) {\n                                console.log('[Tasks Resolver] Converting DynamoDB item to Task:', JSON.stringify(item, null, 2));\n                                var task = convertDynamoItemToTask(item);\n                                console.log('[Tasks Resolver] Converted Task:', JSON.stringify(task, null, 2));\n                                return task;\n                            });\n                            console.log(\"[Tasks Resolver] Successfully converted \".concat(tasks.length, \" tasks\"));\n                            // Fetch associated User objects for createdBy and assignedTo\n                            console.log('[Tasks Resolver] Starting user resolution for tasks');\n                            return [4 /*yield*/, Promise.all(tasks.map(function (task) { return __awaiter(void 0, void 0, void 0, function () {\n                                    var createdByUserCommand, createdByUserResponse, createdBy, assignedTo, assignedToUserCommand, assignedToUserResponse, finalTask;\n                                    return __generator(this, function (_a) {\n                                        switch (_a.label) {\n                                            case 0:\n                                                console.log(\"[Tasks Resolver] Resolving users for task ID: \".concat(task.id, \", createdById: \").concat(task.createdById, \", assignedToId: \").concat(task.assignedToId));\n                                                // Fetch createdBy User\n                                                console.log(\"[Tasks Resolver] Fetching createdBy user with ID: \".concat(task.createdById));\n                                                createdByUserCommand = new client_dynamodb_1.GetItemCommand({\n                                                    TableName: dynamodb_1.TABLES.USERS,\n                                                    Key: { id: toDynamoDBValue(task.createdById) },\n                                                });\n                                                console.log('[Tasks Resolver] CreatedBy GetItemCommand params:', JSON.stringify(createdByUserCommand.input, null, 2));\n                                                return [4 /*yield*/, client.send(createdByUserCommand)];\n                                            case 1:\n                                                createdByUserResponse = _a.sent();\n                                                console.log('[Tasks Resolver] CreatedBy DynamoDB response:', JSON.stringify(createdByUserResponse, null, 2));\n                                                createdBy = createdByUserResponse.Item ? convertDynamoItemToUser(createdByUserResponse.Item) : undefined;\n                                                console.log('[Tasks Resolver] Converted createdBy user:', JSON.stringify(createdBy, null, 2));\n                                                if (!createdBy) {\n                                                    console.error(\"[Tasks Resolver ERROR] createdBy user with ID \".concat(task.createdById, \" not found for task \").concat(task.id));\n                                                }\n                                                assignedTo = null;\n                                                if (!task.assignedToId) return [3 /*break*/, 3];\n                                                console.log(\"[Tasks Resolver] Fetching assignedTo user with ID: \".concat(task.assignedToId));\n                                                assignedToUserCommand = new client_dynamodb_1.GetItemCommand({\n                                                    TableName: dynamodb_1.TABLES.USERS,\n                                                    Key: { id: toDynamoDBValue(task.assignedToId) },\n                                                });\n                                                console.log('[Tasks Resolver] AssignedTo GetItemCommand params:', JSON.stringify(assignedToUserCommand.input, null, 2));\n                                                return [4 /*yield*/, client.send(assignedToUserCommand)];\n                                            case 2:\n                                                assignedToUserResponse = _a.sent();\n                                                console.log('[Tasks Resolver] AssignedTo DynamoDB response:', JSON.stringify(assignedToUserResponse, null, 2));\n                                                assignedTo = assignedToUserResponse.Item ? convertDynamoItemToUser(assignedToUserResponse.Item) : undefined;\n                                                console.log('[Tasks Resolver] Converted assignedTo user:', JSON.stringify(assignedTo, null, 2));\n                                                if (!assignedTo) {\n                                                    console.warn(\"[Tasks Resolver WARNING] assignedTo user with ID \".concat(task.assignedToId, \" not found for task \").concat(task.id));\n                                                }\n                                                _a.label = 3;\n                                            case 3:\n                                                finalTask = __assign(__assign({}, task), { createdBy: createdBy, assignedTo: assignedTo });\n                                                console.log('[Tasks Resolver] Final task with resolved users:', JSON.stringify(finalTask, null, 2));\n                                                return [2 /*return*/, finalTask];\n                                        }\n                                    });\n                                }); }))];\n                        case 3:\n                            tasks = _b.sent();\n                            console.log(\"[Tasks Resolver] Successfully resolved all users for \".concat(tasks.length, \" tasks\"));\n                            return [2 /*return*/, tasks];\n                        case 4:\n                            error_1 = _b.sent();\n                            console.error('[Tasks Resolver ERROR] Error details:', {\n                                message: error_1 instanceof Error ? error_1.message : 'Unknown error',\n                                stack: error_1 instanceof Error ? error_1.stack : undefined,\n                                error: error_1\n                            });\n                            throw new Error('Failed to fetch tasks with users.');\n                        case 5: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n        task: function (_, _a) {\n            var id = _a.id;\n            return __awaiter(void 0, void 0, void 0, function () {\n                var command, response, task, createdByUserCommand, createdByUserResponse, createdBy, assignedTo, assignedToUserCommand, assignedToUserResponse, finalTask, error_2;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // Temporary error test\n                            if (id === 999) {\n                                throw new Error('Test error: This is a simulated server error');\n                            }\n                            console.log(\"[Task Resolver] Fetching task with ID: \".concat(id));\n                            _b.label = 1;\n                        case 1:\n                            _b.trys.push([1, 6, , 7]);\n                            command = new client_dynamodb_1.GetItemCommand({\n                                TableName: dynamodb_1.TABLES.TASKS,\n                                Key: {\n                                    id: toDynamoDBValue(id),\n                                },\n                            });\n                            return [4 /*yield*/, client.send(command)];\n                        case 2:\n                            response = _b.sent();\n                            console.log('[Task Resolver] DynamoDB Get Response:', JSON.stringify(response, null, 2));\n                            if (!response.Item) {\n                                console.warn(\"[Task Resolver WARNING] Task with ID \".concat(id, \" not found.\"));\n                                return [2 /*return*/, null];\n                            }\n                            task = convertDynamoItemToTask(response.Item);\n                            console.log(\"[Task Resolver] Converted task:\", task);\n                            // Fetch createdBy User\n                            console.log(\"[Task Resolver] Fetching createdBy user with ID: \".concat(task.createdById));\n                            createdByUserCommand = new client_dynamodb_1.GetItemCommand({\n                                TableName: dynamodb_1.TABLES.USERS,\n                                Key: { id: toDynamoDBValue(task.createdById) },\n                            });\n                            return [4 /*yield*/, client.send(createdByUserCommand)];\n                        case 3:\n                            createdByUserResponse = _b.sent();\n                            createdBy = createdByUserResponse.Item ? convertDynamoItemToUser(createdByUserResponse.Item) : undefined;\n                            if (!createdBy) {\n                                console.error(\"[Task Resolver ERROR] createdBy user with ID \".concat(task.createdById, \" not found for task \").concat(task.id));\n                                throw new Error(\"User with ID \".concat(task.createdById, \" not found.\"));\n                            }\n                            assignedTo = null;\n                            if (!task.assignedToId) return [3 /*break*/, 5];\n                            console.log(\"[Task Resolver] Fetching assignedTo user with ID: \".concat(task.assignedToId));\n                            assignedToUserCommand = new client_dynamodb_1.GetItemCommand({\n                                TableName: dynamodb_1.TABLES.USERS,\n                                Key: { id: toDynamoDBValue(task.assignedToId) },\n                            });\n                            return [4 /*yield*/, client.send(assignedToUserCommand)];\n                        case 4:\n                            assignedToUserResponse = _b.sent();\n                            assignedTo = assignedToUserResponse.Item ? convertDynamoItemToUser(assignedToUserResponse.Item) : undefined;\n                            if (!assignedTo) {\n                                console.warn(\"[Task Resolver WARNING] assignedTo user with ID \".concat(task.assignedToId, \" not found for task \").concat(task.id));\n                            }\n                            _b.label = 5;\n                        case 5:\n                            finalTask = __assign(__assign({}, task), { createdBy: createdBy, assignedTo: assignedTo });\n                            console.log(\"[Task Resolver] Returning task with resolved users:\", finalTask);\n                            return [2 /*return*/, finalTask];\n                        case 6:\n                            error_2 = _b.sent();\n                            console.error('[Task Resolver ERROR] Error fetching task from DynamoDB:', error_2);\n                            throw new Error('Failed to fetch task.');\n                        case 7: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n        users: function (_, _a) {\n            var tenantId = _a.tenantId;\n            return __awaiter(void 0, void 0, void 0, function () {\n                var command, response, users, error_3;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            console.log(\"[Users Resolver] Fetching users for tenant: \".concat(tenantId));\n                            _b.label = 1;\n                        case 1:\n                            _b.trys.push([1, 3, , 4]);\n                            command = new client_dynamodb_1.QueryCommand({\n                                TableName: dynamodb_1.TABLES.USERS,\n                                IndexName: 'TenantIndex',\n                                KeyConditionExpression: '#tenantId = :tenantId',\n                                ExpressionAttributeNames: {\n                                    '#tenantId': 'tenantId',\n                                },\n                                ExpressionAttributeValues: {\n                                    ':tenantId': toDynamoDBValue(tenantId),\n                                },\n                            });\n                            return [4 /*yield*/, client.send(command)];\n                        case 2:\n                            response = _b.sent();\n                            console.log('[Users Resolver] DynamoDB Query Response (Users):', JSON.stringify(response, null, 2));\n                            users = (response.Items || []).map(convertDynamoItemToUser);\n                            console.log(\"[Users Resolver] Returning \".concat(users.length, \" users for tenant: \").concat(tenantId));\n                            return [2 /*return*/, users];\n                        case 3:\n                            error_3 = _b.sent();\n                            console.error('[Users Resolver ERROR] Error fetching users from DynamoDB:', error_3);\n                            throw new Error('Failed to fetch users.');\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n        user: function (_, _a) {\n            var id = _a.id;\n            return __awaiter(void 0, void 0, void 0, function () {\n                var command, response, user, error_4;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            console.log(\"[User Resolver] Fetching user with ID: \".concat(id));\n                            _b.label = 1;\n                        case 1:\n                            _b.trys.push([1, 3, , 4]);\n                            command = new client_dynamodb_1.GetItemCommand({\n                                TableName: dynamodb_1.TABLES.USERS,\n                                Key: {\n                                    id: toDynamoDBValue(id),\n                                },\n                            });\n                            return [4 /*yield*/, client.send(command)];\n                        case 2:\n                            response = _b.sent();\n                            console.log('[User Resolver] DynamoDB Get Response (User):', JSON.stringify(response, null, 2));\n                            if (!response.Item) {\n                                console.warn(\"[User Resolver WARNING] User with ID \".concat(id, \" not found.\"));\n                                return [2 /*return*/, null];\n                            }\n                            user = convertDynamoItemToUser(response.Item);\n                            console.log(\"[User Resolver] Returning user:\", user);\n                            return [2 /*return*/, user];\n                        case 3:\n                            error_4 = _b.sent();\n                            console.error('[User Resolver ERROR] Error fetching user from DynamoDB:', error_4);\n                            throw new Error('Failed to fetch user.');\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n    },\n    Mutation: {\n        createTask: function (_, _a) {\n            var input = _a.input;\n            return __awaiter(void 0, void 0, void 0, function () {\n                var scanCommand, scanResponse, existingIds, taskId, createdByUserCommand, createdByUserResponse, createdBy, now, newTask, command, assignedTo, assignedToUserCommand, assignedToUserResponse, error_5;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            console.log('[createTask Mutation] Input:', input);\n                            _b.label = 1;\n                        case 1:\n                            _b.trys.push([1, 7, , 8]);\n                            scanCommand = new client_dynamodb_1.ScanCommand({\n                                TableName: dynamodb_1.TABLES.TASKS,\n                                ProjectionExpression: 'id',\n                            });\n                            return [4 /*yield*/, client.send(scanCommand)];\n                        case 2:\n                            scanResponse = _b.sent();\n                            existingIds = (scanResponse.Items || []).map(function (item) { return Number(item.id.N); });\n                            taskId = Math.max.apply(Math, __spreadArray([0], existingIds, false)) + 1;\n                            createdByUserCommand = new client_dynamodb_1.GetItemCommand({\n                                TableName: dynamodb_1.TABLES.USERS,\n                                Key: { id: toDynamoDBValue(input.createdById) },\n                            });\n                            return [4 /*yield*/, client.send(createdByUserCommand)];\n                        case 3:\n                            createdByUserResponse = _b.sent();\n                            createdBy = createdByUserResponse.Item ? convertDynamoItemToUser(createdByUserResponse.Item) : undefined;\n                            if (!createdBy) {\n                                throw new Error(\"User with ID \".concat(input.createdById, \" not found.\"));\n                            }\n                            now = new Date().toISOString();\n                            newTask = {\n                                id: taskId,\n                                title: input.title,\n                                description: input.description || null,\n                                status: input.status,\n                                dueDate: input.dueDate || null,\n                                scheduledDate: input.scheduledDate || null,\n                                completionDate: null,\n                                priority: input.priority || null,\n                                isRecurring: input.isRecurring || false,\n                                assignedToId: input.assignedToId || null,\n                                createdById: input.createdById,\n                                tenantId: input.tenantId,\n                                createdAt: now,\n                                updatedAt: now,\n                            };\n                            command = new client_dynamodb_1.PutItemCommand({\n                                TableName: dynamodb_1.TABLES.TASKS,\n                                Item: Object.fromEntries(Object.entries(newTask).map(function (_a) {\n                                    var key = _a[0], value = _a[1];\n                                    return [key, toDynamoDBValue(value)];\n                                })),\n                            });\n                            return [4 /*yield*/, client.send(command)];\n                        case 4:\n                            _b.sent();\n                            console.log(\"[createTask Mutation] Task created successfully with ID: \".concat(taskId));\n                            assignedTo = null;\n                            if (!input.assignedToId) return [3 /*break*/, 6];\n                            assignedToUserCommand = new client_dynamodb_1.GetItemCommand({\n                                TableName: dynamodb_1.TABLES.USERS,\n                                Key: { id: toDynamoDBValue(input.assignedToId) },\n                            });\n                            return [4 /*yield*/, client.send(assignedToUserCommand)];\n                        case 5:\n                            assignedToUserResponse = _b.sent();\n                            assignedTo = assignedToUserResponse.Item ? convertDynamoItemToUser(assignedToUserResponse.Item) : undefined;\n                            if (!assignedTo) {\n                                console.warn(\"[createTask Mutation WARNING] assignedTo user with ID \".concat(input.assignedToId, \" not found.\"));\n                            }\n                            _b.label = 6;\n                        case 6: return [2 /*return*/, __assign(__assign({}, newTask), { createdBy: createdBy, assignedTo: assignedTo })];\n                        case 7:\n                            error_5 = _b.sent();\n                            console.error('[createTask Mutation ERROR] Error creating task:', error_5);\n                            throw new Error('Failed to create task.');\n                        case 8: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n        updateTask: function (_, _a) {\n            var input = _a.input;\n            return __awaiter(void 0, void 0, void 0, function () {\n                var getCommand, getResponse, currentTask, now, updateExpressions_1, expressionAttributeNames_1, expressionAttributeValues_1, addUpdateExpression, command, response, updatedTask, createdByUserCommand, createdByUserResponse, createdBy, assignedTo, assignedToUserCommand, assignedToUserResponse, error_6;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            console.log(\"[updateTask Mutation] Updating task with input:\", input);\n                            _b.label = 1;\n                        case 1:\n                            _b.trys.push([1, 7, , 8]);\n                            getCommand = new client_dynamodb_1.GetItemCommand({\n                                TableName: dynamodb_1.TABLES.TASKS,\n                                Key: {\n                                    id: toDynamoDBValue(input.id),\n                                },\n                            });\n                            return [4 /*yield*/, client.send(getCommand)];\n                        case 2:\n                            getResponse = _b.sent();\n                            if (!getResponse.Item) {\n                                throw new Error(\"Task with ID \".concat(input.id, \" not found.\"));\n                            }\n                            currentTask = convertDynamoItemToTask(getResponse.Item);\n                            now = new Date().toISOString();\n                            updateExpressions_1 = [];\n                            expressionAttributeNames_1 = {};\n                            expressionAttributeValues_1 = {};\n                            addUpdateExpression = function (key, value) {\n                                var attributeName = \"#\".concat(key);\n                                var attributeValue = \":\".concat(key);\n                                expressionAttributeNames_1[attributeName] = key;\n                                expressionAttributeValues_1[attributeValue] = toDynamoDBValue(value);\n                                updateExpressions_1.push(\"\".concat(attributeName, \" = \").concat(attributeValue));\n                            };\n                            // Add update expressions for each field that is provided in the input\n                            if (input.title !== undefined)\n                                addUpdateExpression('title', input.title);\n                            if (input.description !== undefined)\n                                addUpdateExpression('description', input.description);\n                            if (input.status !== undefined)\n                                addUpdateExpression('status', input.status);\n                            if (input.dueDate !== undefined)\n                                addUpdateExpression('dueDate', input.dueDate);\n                            if (input.scheduledDate !== undefined)\n                                addUpdateExpression('scheduledDate', input.scheduledDate);\n                            if (input.completionDate !== undefined)\n                                addUpdateExpression('completionDate', input.completionDate);\n                            if (input.priority !== undefined)\n                                addUpdateExpression('priority', input.priority);\n                            if (input.isRecurring !== undefined)\n                                addUpdateExpression('isRecurring', input.isRecurring);\n                            if (input.assignedToId !== undefined)\n                                addUpdateExpression('assignedToId', input.assignedToId);\n                            addUpdateExpression('updatedAt', now);\n                            command = new client_dynamodb_1.UpdateItemCommand({\n                                TableName: dynamodb_1.TABLES.TASKS,\n                                Key: {\n                                    id: toDynamoDBValue(input.id),\n                                },\n                                UpdateExpression: \"SET \".concat(updateExpressions_1.join(', ')),\n                                ExpressionAttributeNames: expressionAttributeNames_1,\n                                ExpressionAttributeValues: expressionAttributeValues_1,\n                                ReturnValues: 'ALL_NEW',\n                            });\n                            return [4 /*yield*/, client.send(command)];\n                        case 3:\n                            response = _b.sent();\n                            console.log('[updateTask Mutation] DynamoDB Update Response:', JSON.stringify(response, null, 2));\n                            if (!response.Attributes) {\n                                throw new Error('Failed to update task.');\n                            }\n                            updatedTask = convertDynamoItemToTask(response.Attributes);\n                            createdByUserCommand = new client_dynamodb_1.GetItemCommand({\n                                TableName: dynamodb_1.TABLES.USERS,\n                                Key: { id: toDynamoDBValue(updatedTask.createdById) },\n                            });\n                            return [4 /*yield*/, client.send(createdByUserCommand)];\n                        case 4:\n                            createdByUserResponse = _b.sent();\n                            createdBy = createdByUserResponse.Item ? convertDynamoItemToUser(createdByUserResponse.Item) : undefined;\n                            assignedTo = null;\n                            if (!(updatedTask.assignedToId != null)) return [3 /*break*/, 6];\n                            assignedToUserCommand = new client_dynamodb_1.GetItemCommand({\n                                TableName: dynamodb_1.TABLES.USERS,\n                                Key: { id: toDynamoDBValue(updatedTask.assignedToId) },\n                            });\n                            return [4 /*yield*/, client.send(assignedToUserCommand)];\n                        case 5:\n                            assignedToUserResponse = _b.sent();\n                            assignedTo = assignedToUserResponse.Item ? convertDynamoItemToUser(assignedToUserResponse.Item) : undefined;\n                            _b.label = 6;\n                        case 6: return [2 /*return*/, __assign(__assign({}, updatedTask), { createdBy: createdBy, assignedTo: assignedTo })];\n                        case 7:\n                            error_6 = _b.sent();\n                            console.error('[updateTask Mutation ERROR] Error updating task:', error_6);\n                            throw new Error('Failed to update task.');\n                        case 8: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n        deleteTask: function (_, _a) {\n            var id = _a.id;\n            return __awaiter(void 0, void 0, void 0, function () {\n                var getCommand, getResponse, command, error_7;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            console.log(\"[deleteTask Mutation] Deleting task with ID: \".concat(id));\n                            _b.label = 1;\n                        case 1:\n                            _b.trys.push([1, 4, , 5]);\n                            getCommand = new client_dynamodb_1.GetItemCommand({\n                                TableName: dynamodb_1.TABLES.TASKS,\n                                Key: { id: toDynamoDBValue(id) },\n                            });\n                            return [4 /*yield*/, client.send(getCommand)];\n                        case 2:\n                            getResponse = _b.sent();\n                            if (!getResponse.Item) {\n                                console.warn(\"[deleteTask Mutation WARNING] Task with ID \".concat(id, \" not found for deletion.\"));\n                                return [2 /*return*/, false];\n                            }\n                            command = new client_dynamodb_1.DeleteItemCommand({\n                                TableName: dynamodb_1.TABLES.TASKS,\n                                Key: {\n                                    id: toDynamoDBValue(id),\n                                },\n                            });\n                            return [4 /*yield*/, client.send(command)];\n                        case 3:\n                            _b.sent();\n                            console.log(\"[deleteTask Mutation] Task deleted successfully with ID: \".concat(id));\n                            return [2 /*return*/, true];\n                        case 4:\n                            error_7 = _b.sent();\n                            console.error('[deleteTask Mutation ERROR] Error deleting task:', error_7);\n                            throw new Error('Failed to delete task.');\n                        case 5: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n    },\n    // Add resolver for the Priority enum (optional, but good practice)\n    Priority: {\n        LOW: 'LOW',\n        MEDIUM: 'MEDIUM',\n        HIGH: 'HIGH',\n    },\n    // Add resolvers for Task fields that require special handling (like User resolution)\n    Task: {\n        createdBy: function (task) { return __awaiter(void 0, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                // createdBy is already resolved in the parent task query/mutation resolvers\n                // This resolver is here mainly for type safety and clarity\n                return [2 /*return*/, task.createdBy];\n            });\n        }); },\n        assignedTo: function (task) { return __awaiter(void 0, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                // assignedTo is already resolved in the parent task query/mutation resolvers\n                // This resolver is here mainly for type safety and clarity\n                return [2 /*return*/, task.assignedTo];\n            });\n        }); },\n        // Add resolvers for new fields if they require formatting or special logic\n        scheduledDate: function (task) { return task.scheduledDate || null; },\n        completionDate: function (task) { return task.completionDate || null; },\n        priority: function (task) { return task.priority || null; },\n        isRecurring: function (task) { return task.isRecurring || false; },\n    },\n    User: {\n        id: function (user) { return typeof user.id === 'string' ? parseInt(user.id) : user.id; },\n    }\n};\n"],"mappings":"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","names":["client","_a"]}